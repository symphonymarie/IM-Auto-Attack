{
  "IMAA Token Manager": {
    "name": "IMAA Token Manager", 
    "type": "script",
    "author": "IMAA Token Manager Module",
    "img": "icons/svg/upgrade.svg",
    "scope": "global",
    "command": "IMAATokenManager.openIMAAManager();",
    "folder": "IMAA Bulk Token Macros",
    "flags": {},
    "_stats": {
      "coreVersion": "13.348",
      "systemId": "impmal",
      "systemVersion": "3.0.4"
    }
  },
  "Quick Add Auto-Attack": {
    "name": "Quick Add Auto-Attack",
    "type": "script", 
    "author": "IMAA Token Manager Module",
    "img": "icons/svg/aura.svg",
    "scope": "global",
    "command": "const selectedTokens = canvas.tokens.controlled;\nif (selectedTokens.length === 0) {\n  ui.notifications.warn(\"Please select one or more tokens first.\");\n  return;\n}\n\nconst autoAttackUUID = game.settings.get(\"imaa-token-manager\", \"autoAttackUUID\");\nif (!autoAttackUUID) {\n  ui.notifications.error(\"Please create the Auto-Combat trait in module settings first!\");\n  return;\n}\n\nconst traitItem = await fromUuid(autoAttackUUID);\nif (!traitItem) {\n  ui.notifications.error(\"Auto-Attack trait item not found. Please recreate the trait in module settings.\");\n  return;\n}\n\nlet addedCount = 0;\nfor (const t of selectedTokens) {\n  const actor = t.actor;\n  if (!actor) continue;\n\n  const alreadyHas = actor.items.some(i =>\n    i.getFlag?.(\"core\", \"sourceId\") === autoAttackUUID ||\n    i.name === traitItem.name\n  );\n\n  if (!alreadyHas) {\n    await actor.createEmbeddedDocuments(\"Item\", [traitItem.toObject()]);\n    addedCount++;\n  }\n}\n\nui.notifications.info(`Added Auto-Attack to ${addedCount} out of ${selectedTokens.length} selected tokens.`);",
    "folder": "IMAA Bulk Token Macros",
    "flags": {},
    "_stats": {
      "coreVersion": "13.348",
      "systemId": "impmal", 
      "systemVersion": "3.0.4"
    }
  },
  "Quick Remove Auto-Attack": {
    "name": "Quick Remove Auto-Attack",
    "type": "script",
    "author": "IMAA Token Manager Module",
    "img": "icons/svg/cancel.svg",
    "scope": "global",
    "command": "const selectedTokens = canvas.tokens.controlled;\nif (selectedTokens.length === 0) {\n  ui.notifications.warn(\"Please select one or more tokens first.\");\n  return;\n}\n\nconst autoAttackUUID = game.settings.get(\"imaa-token-manager\", \"autoAttackUUID\");\nif (!autoAttackUUID) {\n  ui.notifications.error(\"Please create the Auto-Combat trait in module settings first!\");\n  return;\n}\n\nlet traitItem = null;\ntry {\n  traitItem = await fromUuid(autoAttackUUID);\n} catch (err) {\n  console.warn(\"Could not resolve trait UUID; will only try sourceId matching.\", err);\n}\n\nlet totalRemoved = 0;\nfor (const token of selectedTokens) {\n  const actor = token.actor;\n  if (!actor) continue;\n\n  const toRemove = actor.items.filter(i =>\n    i.getFlag?.(\"core\", \"sourceId\") === autoAttackUUID ||\n    (traitItem && i.name === traitItem.name)\n  );\n\n  if (toRemove.length > 0) {\n    await actor.deleteEmbeddedDocuments(\n      \"Item\",\n      toRemove.map(i => i.id)\n    );\n    totalRemoved += toRemove.length;\n  }\n}\n\nif (totalRemoved > 0) {\n  ui.notifications.info(`Removed ${totalRemoved} Auto-Attack item(s) from ${selectedTokens.length} token(s).`);\n} else {\n  ui.notifications.warn(\"No Auto-Attack items found to remove.\");\n}",
    "folder": "IMAA Bulk Token Macros",
    "flags": {},
    "_stats": {
      "coreVersion": "13.348",
      "systemId": "impmal",
      "systemVersion": "3.0.4"
    }
  },
  "IMAA Clear Effects": {
    "name": "IMAA Clear Effects", 
    "type": "script",
    "author": "IMAA Token Manager Module",
    "img": "icons/svg/clean.svg",
    "scope": "global",
    "command": "const selectedTokens = canvas.tokens.controlled;\nif (selectedTokens.length === 0) {\n  ui.notifications.warn(\"Please select one or more tokens first.\");\n  return;\n}\n\nlet clearedCount = 0;\nfor (const tkn of selectedTokens) {\n  if (tkn.actor) {\n    try {\n      const removeList = tkn.actor.temporaryEffects.map(e => e.id);\n      if (removeList.length > 0) {\n        await tkn.actor.deleteEmbeddedDocuments(\"ActiveEffect\", removeList);\n      }\n      clearedCount++;\n    } catch (error) {\n      console.error(`Failed to clear effects for token ${tkn.name}:`, error);\n    }\n  }\n}\nui.notifications.info(`Cleared effects from ${clearedCount} token(s)`);",
    "folder": "IMAA Bulk Token Macros",
    "flags": {},
    "_stats": {
      "coreVersion": "13.348",
      "systemId": "impmal",
      "systemVersion": "3.0.4"
    }
  },
  "IMAA Reset Wounds": {
    "name": "IMAA Reset Wounds",
    "type": "script",
    "author": "IMAA Token Manager Module", 
    "img": "icons/svg/healing.svg",
    "scope": "global",
    "command": "const selectedTokens = canvas.tokens.controlled;\nif (selectedTokens.length === 0) {\n  ui.notifications.warn(\"Please select one or more tokens first.\");\n  return;\n}\n\nlet updatedCount = 0;\nfor (const tkn of selectedTokens) {\n  if (tkn.actor) {\n    try {\n      await tkn.actor.update({\"system.combat.wounds.value\": 0});\n      updatedCount++;\n    } catch (error) {\n      console.error(`Failed to update wounds for token ${tkn.name}:`, error);\n    }\n  }\n}\nui.notifications.info(`Reset wounds for ${updatedCount} out of ${selectedTokens.length} selected tokens.`);",
    "folder": "IMAA Bulk Token Macros",
    "flags": {},
    "_stats": {
      "coreVersion": "13.348",
      "systemId": "impmal",
      "systemVersion": "3.0.4"
    }
  }
}